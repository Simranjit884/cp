// O(N^2) solution

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> targetArray;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i] + nums[j] == target){
                    targetArray.push_back(i);
                    targetArray.push_back(j);
                    break;
                }
            }
        }
        return targetArray;
    }
};

// O(N) solution

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> twoSumNumbers;
        unordered_map<int, int> um;
        for(int i=0;i<nums.size();i++){
            if(um.find(target-nums[i]) != um.end()){
                return {um[target-nums[i]], i};
            }
            um[nums[i]] = i;
        }
        return {};
    }
};
